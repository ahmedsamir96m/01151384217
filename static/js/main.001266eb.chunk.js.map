{"version":3,"sources":["components/ActivityChart.js","App.js","reportWebVitals.js","index.js"],"names":["ActivityChart","useState","fetchedData","setFetchedData","useEffect","a","fetch","then","res","json","data","catch","err","console","log","fetchData","goalTypeArr","points","map","dataObj","goal","undefined","hasOwnProperty","goal_type","points_in","includes","push","labels","datasets","label","Object","values","backgroundColor","width","height","options","maintainAspectRatio","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNA+EeA,EA5EO,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACnBC,EADmB,KACNC,EADM,KAI1BC,qBAAU,YACO,uCAAG,sBAAAC,EAAA,sEACHC,MACX,8DAECC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAUP,EAAeO,MAC9BC,OAAM,SAACC,GACNC,QAAQC,IAAIF,MAPA,mFAAH,qDAUfG,KACC,IAGH,IAAMC,EAAc,GACdC,EAAS,GAwBf,OArBAf,EAAYgB,KAAI,SAACC,GACf,OAAIA,EAAQC,WAAyBC,IAAjBF,EAAQC,KACnBH,EAAOK,eAAeH,EAAQC,KAAKG,WACrCN,EAAOE,EAAQC,KAAKG,YAAcJ,EAAQC,KAAKI,UAC/CP,EAAOE,EAAQC,KAAKG,WAAaJ,EAAQC,KAAKI,UAE5CP,KAKXf,EAAYgB,KAAI,SAACC,GACf,OAAIA,EAAQC,WAAyBC,IAAjBF,EAAQC,KACnBJ,EAAYS,SAASN,EAAQC,KAAKG,WACrCP,EACAA,EAAYU,KAAKP,EAAQC,KAAKG,WAE3BP,KAKT,8BACE,cAAC,MAAD,CACEN,KAAM,CACJiB,OAAQX,EACRY,SAAU,CACR,CACEC,MAAO,gBACPnB,KAAMoB,OAAOC,OAAOd,GACpBe,gBAAiB,CACf,SACA,QACA,SACA,MACA,OACA,QACA,SACA,aAKRC,MAAO,IACPC,OAAQ,IACRC,QAAS,CACPC,qBAAqB,QC7DhBC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.001266eb.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nconst ActivityChart = () => {\r\n  const [fetchedData, setFetchedData] = useState([]);\r\n\r\n  // fetching data for the api endpoint and store it in the state\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      return await fetch(\r\n        \"https://marketune-visualization-test.herokuapp.com/getData\"\r\n      )\r\n        .then((res) => res.json())\r\n        .then((data) => setFetchedData(data))\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // vars to store the user goaltype and points the comes from the api\r\n  const goalTypeArr = [];\r\n  const points = {};\r\n\r\n  // map through the state and store the user points in points object based on if it has the key or not\r\n  fetchedData.map((dataObj) => {\r\n    if (dataObj.goal && dataObj.goal !== undefined) {\r\n      return points.hasOwnProperty(dataObj.goal.goal_type)\r\n        ? (points[dataObj.goal.goal_type] += dataObj.goal.points_in)\r\n        : (points[dataObj.goal.goal_type] = dataObj.goal.points_in);\r\n    } else {\r\n      return points;\r\n    }\r\n  });\r\n\r\n  // map through the state and store the user goal type in the goaltypearr if it's not included\r\n  fetchedData.map((dataObj) => {\r\n    if (dataObj.goal && dataObj.goal !== undefined) {\r\n      return goalTypeArr.includes(dataObj.goal.goal_type)\r\n        ? goalTypeArr\r\n        : goalTypeArr.push(dataObj.goal.goal_type);\r\n    } else {\r\n      return goalTypeArr;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Bar\r\n        data={{\r\n          labels: goalTypeArr,\r\n          datasets: [\r\n            {\r\n              label: \"User Activity\",\r\n              data: Object.values(points),\r\n              backgroundColor: [\r\n                \"yellow\",\r\n                \"green\",\r\n                \"orange\",\r\n                \"red\",\r\n                \"blue\",\r\n                \"black\",\r\n                \"tomato\",\r\n                \"purple\",\r\n              ],\r\n            },\r\n          ],\r\n        }}\r\n        width={600}\r\n        height={400}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActivityChart;\r\n","import \"./App.css\";\r\nimport ActivityChart from \"./components/ActivityChart\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ActivityChart></ActivityChart>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}